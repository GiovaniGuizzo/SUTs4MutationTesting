/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 01 19:35:56 GMT 2016
 */

package edu.uclm.esi.iso5.juegos.monopoly.dominio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.uclm.esi.iso5.juegos.monopoly.dominio.Jugador;
import edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parking_ESTest extends Parking_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 25 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: root-Branch
   * Goal 3. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: root-Branch in context: 
   * Goal 4. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking:<init>(I)V
   * Goal 5. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:Positive
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: Line 14
   * Goal 7. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: Line 15
   * Goal 8. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 30
   * Goal 9. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 31
   * Goal 10. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 32
   * Goal 11. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V
   * Goal 12. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 13. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V
   * Goal 14. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 15. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V:14 - ReplaceConstant - 0.0 -> 1.0
   * Goal 16. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V:14 - ReplaceConstant - 0.0 -> -1.0
   * Goal 17. Weak Mutation 9: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:30 - ReplaceVariable j -> propietario
   * Goal 18. Weak Mutation 10: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:30 - InsertUnaryOp Negation
   * Goal 19. Weak Mutation 11: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:31 - ReplaceConstant - 0.0 -> 1.0
   * Goal 20. Weak Mutation 12: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:31 - ReplaceConstant - 0.0 -> -1.0
   * Goal 21. Weak Mutation 13: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:32 - ReplaceConstant - 4 -> 0
   * Goal 22. Weak Mutation 14: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:32 - ReplaceConstant - 4 -> 1
   * Goal 23. Weak Mutation 15: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:32 - ReplaceConstant - 4 -> -1
   * Goal 24. Weak Mutation 16: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:32 - ReplaceConstant - 4 -> 3
   * Goal 25. Weak Mutation 17: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:32 - ReplaceConstant - 4 -> 5
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Parking parking0 = new Parking(15);
      Jugador jugador0 = new Jugador("td");
      int int0 = parking0.operaciones(jugador0);
      assertEquals(4, int0);
      assertEquals(0.0, parking0.getCapital(), 0.01);
  }

  //Test case number: 1
  /*
   * 27 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V: root-Branch
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: root-Branch
   * Goal 4. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V: root-Branch in context: 
   * Goal 5. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking:getCapital()D
   * Goal 6. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking:<init>(I)V
   * Goal 7. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D:Positive
   * Goal 8. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: Line 14
   * Goal 9. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: Line 15
   * Goal 10. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D: Line 26
   * Goal 11. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V: Line 18
   * Goal 12. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V: Line 19
   * Goal 13. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V
   * Goal 14. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D
   * Goal 15. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V
   * Goal 16. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V
   * Goal 17. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D
   * Goal 18. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V
   * Goal 19. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V:14 - ReplaceConstant - 0.0 -> 1.0
   * Goal 20. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V:14 - ReplaceConstant - 0.0 -> -1.0
   * Goal 21. Weak Mutation 2: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V:18 - InsertUnaryOp Negation
   * Goal 22. Weak Mutation 3: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V:18 - InsertUnaryOp Negation of importe
   * Goal 23. Weak Mutation 4: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V:18 - ReplaceArithmeticOperator + -> %
   * Goal 24. Weak Mutation 5: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V:18 - ReplaceArithmeticOperator + -> -
   * Goal 25. Weak Mutation 6: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V:18 - ReplaceArithmeticOperator + -> *
   * Goal 26. Weak Mutation 7: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V:18 - ReplaceArithmeticOperator + -> /
   * Goal 27. Weak Mutation 8: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D:26 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Parking parking0 = new Parking(15);
      parking0.incrementaCapital(15);
      double double0 = parking0.getCapital();
      assertEquals(15.0, double0, 0.01);
  }

  //Test case number: 2
  /*
   * 27 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V: root-Branch
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: root-Branch
   * Goal 4. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V: root-Branch in context: 
   * Goal 5. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking:getCapital()D
   * Goal 6. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking:<init>(I)V
   * Goal 7. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D:Negative
   * Goal 8. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: Line 14
   * Goal 9. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: Line 15
   * Goal 10. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D: Line 26
   * Goal 11. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V: Line 18
   * Goal 12. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V: Line 19
   * Goal 13. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V
   * Goal 14. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D
   * Goal 15. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V
   * Goal 16. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V
   * Goal 17. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D
   * Goal 18. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V
   * Goal 19. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V:14 - ReplaceConstant - 0.0 -> 1.0
   * Goal 20. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V:14 - ReplaceConstant - 0.0 -> -1.0
   * Goal 21. Weak Mutation 2: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V:18 - InsertUnaryOp Negation
   * Goal 22. Weak Mutation 3: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V:18 - InsertUnaryOp Negation of importe
   * Goal 23. Weak Mutation 4: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V:18 - ReplaceArithmeticOperator + -> %
   * Goal 24. Weak Mutation 5: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V:18 - ReplaceArithmeticOperator + -> -
   * Goal 25. Weak Mutation 6: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V:18 - ReplaceArithmeticOperator + -> *
   * Goal 26. Weak Mutation 7: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.incrementaCapital(D)V:18 - ReplaceArithmeticOperator + -> /
   * Goal 27. Weak Mutation 8: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D:26 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Parking parking0 = new Parking((-4520));
      parking0.incrementaCapital((-1128.8776));
      double double0 = parking0.getCapital();
      assertEquals((-1128.8776), double0, 0.01);
  }

  //Test case number: 3
  /*
   * 14 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: root-Branch
   * Goal 3. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: root-Branch in context: 
   * Goal 4. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking:<init>(I)V
   * Goal 5. operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I_java.lang.NullPointerException_IMPLICIT
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: Line 14
   * Goal 7. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: Line 15
   * Goal 8. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 30
   * Goal 9. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V
   * Goal 10. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 11. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V
   * Goal 12. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V:14 - ReplaceConstant - 0.0 -> 1.0
   * Goal 13. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V:14 - ReplaceConstant - 0.0 -> -1.0
   * Goal 14. Weak Mutation 10: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:30 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Parking parking0 = new Parking((-4520));
      // Undeclared exception!
      try { 
        parking0.operaciones((Jugador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking", e);
      }
  }

  //Test case number: 4
  /*
   * 15 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: root-Branch
   * Goal 3. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking:getCapital()D
   * Goal 4. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking:<init>(I)V
   * Goal 5. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D:Zero
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: Line 14
   * Goal 7. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V: Line 15
   * Goal 8. edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D: Line 26
   * Goal 9. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V
   * Goal 10. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D
   * Goal 11. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V
   * Goal 12. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D
   * Goal 13. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V:14 - ReplaceConstant - 0.0 -> 1.0
   * Goal 14. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.<init>(I)V:14 - ReplaceConstant - 0.0 -> -1.0
   * Goal 15. Weak Mutation 8: edu.uclm.esi.iso5.juegos.monopoly.dominio.Parking.getCapital()D:26 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Parking parking0 = new Parking((-4520));
      double double0 = parking0.getCapital();
      assertEquals(0.0, double0, 0.01);
  }
}
