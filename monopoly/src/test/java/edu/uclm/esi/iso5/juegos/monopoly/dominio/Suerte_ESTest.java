/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 01 19:37:13 GMT 2016
 */

package edu.uclm.esi.iso5.juegos.monopoly.dominio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.uclm.esi.iso5.juegos.monopoly.dominio.Jugador;
import edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte;
import edu.uclm.esi.iso5.juegos.monopoly.dominio.Tablero;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class Suerte_ESTest extends Suerte_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 27 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.<init>(I)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I11 Branch 1 IFEQ L18 - true
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I11 Branch 1 IFEQ L18 - false
   * Goal 4. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.<init>(I)V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte:<init>(I)V
   * Goal 5. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I11 Branch 1 IFEQ L18 - false in context: 
   * Goal 6. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I11 Branch 1 IFEQ L18 - true in context: 
   * Goal 7. operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I_java.lang.NullPointerException_IMPLICIT
   * Goal 8. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:Positive
   * Goal 9. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:Zero
   * Goal 10. edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.<init>(I)V: Line 14
   * Goal 11. edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 17
   * Goal 12. edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 18
   * Goal 13. edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 19
   * Goal 14. edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 21
   * Goal 15. edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 22
   * Goal 16. edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 24
   * Goal 17. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.<init>(I)V
   * Goal 18. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 19. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.<init>(I)V
   * Goal 20. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 21. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:17 - ReplaceConstant - 1 -> 0
   * Goal 22. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:18 - ReplaceComparisonOperator == -> !=
   * Goal 23. Weak Mutation 2: edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:19 - ReplaceConstant - 1 -> 0
   * Goal 24. Weak Mutation 3: edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:21 - ReplaceConstant - 1 -> 0
   * Goal 25. Weak Mutation 4: edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:22 - ReplaceConstant - 1 -> 0
   * Goal 26. Weak Mutation 5: edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:24 - ReplaceVariable j -> propietario
   * Goal 27. Weak Mutation 6: edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:24 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Suerte suerte0 = new Suerte(1);
      Tablero tablero0 = new Tablero();
      tablero0.addTarjetasPorDefecto();
      suerte0.setTablero(tablero0);
      Jugador jugador0 = new Jugador("XUO(_S_");
      suerte0.operaciones(jugador0);
      suerte0.operaciones(jugador0);
      suerte0.operaciones(jugador0);
      // Undeclared exception!
      try { 
        suerte0.operaciones((Jugador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.uclm.esi.iso5.juegos.monopoly.dominio.tarjetas.QuedaLibreDeLaCarcel", e);
      }
  }

  //Test case number: 1
  /*
   * 9 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.<init>(I)V: root-Branch
   * Goal 2. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.<init>(I)V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte:<init>(I)V
   * Goal 3. operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.<init>(I)V: Line 14
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 17
   * Goal 6. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.<init>(I)V
   * Goal 7. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 8. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.<init>(I)V
   * Goal 9. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.Suerte.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:17 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Suerte suerte0 = new Suerte(0);
      Tablero tablero0 = new Tablero();
      suerte0.setTablero(tablero0);
      // Undeclared exception!
      try { 
        suerte0.operaciones((Jugador) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
