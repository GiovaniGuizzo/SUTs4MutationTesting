/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 01 19:23:54 GMT 2016
 */

package edu.uclm.esi.iso5.juegos.monopoly.dominio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.uclm.esi.iso5.juegos.monopoly.dominio.Barrio;
import edu.uclm.esi.iso5.juegos.monopoly.dominio.Calle;
import edu.uclm.esi.iso5.juegos.monopoly.dominio.Compania;
import edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion;
import edu.uclm.esi.iso5.juegos.monopoly.dominio.Jugador;
import edu.uclm.esi.iso5.juegos.monopoly.dominio.Tablero;
import java.awt.Color;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false) 
public class CasillaConPrecio_ESTest extends CasillaConPrecio_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 36 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: root-Branch
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I4 Branch 4 IFNULL L82 - true
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I18 Branch 5 IFGE L84 - true
   * Goal 6. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio:hipotecar()V
   * Goal 7. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I4 Branch 4 IFNULL L82 - true in context: 
   * Goal 8. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I18 Branch 5 IFGE L84 - true in context: 
   * Goal 9. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 10. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 82
   * Goal 11. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 84
   * Goal 12. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 86
   * Goal 13. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 87
   * Goal 14. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 88
   * Goal 15. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: Line 45
   * Goal 16. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V: Line 77
   * Goal 17. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V: Line 78
   * Goal 18. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V: Line 79
   * Goal 19. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V
   * Goal 20. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V
   * Goal 21. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V
   * Goal 22. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V
   * Goal 23. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D:45 - InsertUnaryOp Negation
   * Goal 24. Weak Mutation 32: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:77 - ReplaceConstant - 1 -> 0
   * Goal 25. Weak Mutation 33: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceConstant - 2.0 -> 0.0
   * Goal 26. Weak Mutation 34: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceConstant - 2.0 -> 1.0
   * Goal 27. Weak Mutation 35: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceConstant - 2.0 -> -1.0
   * Goal 28. Weak Mutation 36: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceConstant - 2.0 -> 3.0
   * Goal 29. Weak Mutation 37: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceArithmeticOperator / -> +
   * Goal 30. Weak Mutation 38: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceArithmeticOperator / -> %
   * Goal 31. Weak Mutation 39: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceArithmeticOperator / -> -
   * Goal 32. Weak Mutation 40: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceArithmeticOperator / -> *
   * Goal 33. Weak Mutation 41: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:82 - ReplaceComparisonOperator = null -> != null
   * Goal 34. Weak Mutation 42: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:84 - ReplaceVariable jugador -> propietario
   * Goal 35. Weak Mutation 44: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:84 - ReplaceComparisonOperator >= -> ==
   * Goal 36. Weak Mutation 46: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:86 - ReplaceVariable jugador -> propietario
   */

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Estacion estacion0 = new Estacion("p1", 516.7157927861991, (-809));
      Jugador jugador0 = new Jugador("p1");
      estacion0.comprar(jugador0);
      estacion0.hipotecar();
      assertTrue(estacion0.estaHipotecada());
  }

  //Test case number: 1
  /*
   * 5 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 2. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getTasaPorCaer()D:Zero
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 4. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getTasaPorCaer()D
   * Goal 5. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getTasaPorCaer()D
   */

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compania compania0 = new Compania("z&UZa3t8$m!.g(^UrV", 140.0, 3);
      double double0 = compania0.getTasaPorCaer();
      assertEquals(0.0, double0, 0.01);
  }

  //Test case number: 2
  /*
   * 8 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: root-Branch
   * Goal 3. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getTasaPorCaer()D:Positive
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: Line 45
   * Goal 6. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getTasaPorCaer()D
   * Goal 7. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getTasaPorCaer()D
   * Goal 8. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D:45 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Estacion estacion0 = new Estacion("1.-kY[ u6D*&`j[", 1486.32566454423, 2359);
      Jugador jugador0 = new Jugador("1.-kY[ u6D*&`j[");
      estacion0.propietario = jugador0;
      double double0 = estacion0.getTasaPorCaer();
      assertEquals(1486.32566454423, double0, 0.01);
  }

  //Test case number: 3
  /*
   * 8 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 3. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getTasaPorCaer()D:Negative
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z: Line 37
   * Goal 6. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getTasaPorCaer()D
   * Goal 7. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getTasaPorCaer()D
   * Goal 8. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z:37 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Color color0 = Color.blue;
      Barrio barrio0 = new Barrio(color0);
      Calle calle0 = new Calle("-`;Hg6_fxKH\"", 2510.68, barrio0, (-1761), (double) (-1761), (double) (-1761), 0.0, 700.0, 1200.0, 2282.37, 1200.0);
      double double0 = calle0.getTasaPorCaer();
      assertEquals((-1761.0), double0, 0.01);
  }

  //Test case number: 4
  /*
   * 9 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: root-Branch
   * Goal 3. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio:getPrecio()D
   * Goal 4. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D:Zero
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: Line 45
   * Goal 7. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D
   * Goal 8. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D
   * Goal 9. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D:45 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Estacion estacion0 = new Estacion("'jy6g", 0.0, 0);
      double double0 = estacion0.getPrecio();
      assertEquals(0.0, double0, 0.01);
  }

  //Test case number: 5
  /*
   * 9 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: root-Branch
   * Goal 3. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio:getPrecio()D
   * Goal 4. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D:Negative
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: Line 45
   * Goal 7. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D
   * Goal 8. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D
   * Goal 9. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D:45 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compania compania0 = new Compania("Pla\uFFFDa de Catalunya", (-1470.1929), 0);
      double double0 = compania0.getPrecio();
      assertEquals((-1470.1929), double0, 0.01);
  }

  //Test case number: 6
  /*
   * 9 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 3. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio:estaHipotecada()Z
   * Goal 4. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z:True
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z: Line 37
   * Goal 7. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z
   * Goal 8. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z
   * Goal 9. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z:37 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Estacion estacion0 = new Estacion("H", (-515.3704589937), 4309);
      estacion0.estaHipotecada = true;
      boolean boolean0 = estacion0.estaHipotecada();
      assertTrue(boolean0);
  }

  //Test case number: 7
  /*
   * 20 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: root-Branch
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I4 Branch 1 IFNONNULL L49 - true
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I14 Branch 2 IF_ACMPEQ L51 - false
   * Goal 5. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I4 Branch 1 IFNONNULL L49 - true in context: 
   * Goal 6. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I14 Branch 2 IF_ACMPEQ L51 - false in context: 
   * Goal 7. operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I_java.lang.NullPointerException_IMPLICIT
   * Goal 8. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 9. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: Line 45
   * Goal 10. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 49
   * Goal 11. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 51
   * Goal 12. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 52
   * Goal 13. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 54
   * Goal 14. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 15. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D:45 - InsertUnaryOp Negation
   * Goal 16. Weak Mutation 2: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:49 - ReplaceComparisonOperator != null -> = null
   * Goal 17. Weak Mutation 7: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:51 - ReplaceVariable j -> propietario
   * Goal 18. Weak Mutation 8: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:51 - ReplaceComparisonOperator == -> !=
   * Goal 19. Weak Mutation 9: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:54 - ReplaceVariable j -> propietario
   * Goal 20. Weak Mutation 11: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:54 - InsertUnaryOp Negation of tasaPorPasar
   */

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Estacion estacion0 = new Estacion("Avinguda Josep Tarradellas", 277.9901837417329, 1514);
      Jugador jugador0 = new Jugador("Avinguda Josep Tarradellas");
      estacion0.propietario = jugador0;
      // Undeclared exception!
      try { 
        estacion0.operaciones((Jugador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio", e);
      }
  }

  //Test case number: 8
  /*
   * 35 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: root-Branch
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I4 Branch 1 IFNONNULL L49 - true
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I14 Branch 2 IF_ACMPEQ L51 - false
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I4 Branch 4 IFNULL L82 - true
   * Goal 7. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I18 Branch 5 IFGE L84 - true
   * Goal 8. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I4 Branch 1 IFNONNULL L49 - true in context: 
   * Goal 9. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I14 Branch 2 IF_ACMPEQ L51 - false in context: 
   * Goal 10. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I4 Branch 4 IFNULL L82 - true in context: 
   * Goal 11. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I18 Branch 5 IFGE L84 - true in context: 
   * Goal 12. operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I_java.lang.ArrayIndexOutOfBoundsException_IMPLICIT
   * Goal 13. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 14. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 82
   * Goal 15. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 84
   * Goal 16. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 86
   * Goal 17. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 87
   * Goal 18. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 88
   * Goal 19. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z: Line 37
   * Goal 20. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: Line 45
   * Goal 21. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 49
   * Goal 22. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 51
   * Goal 23. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 52
   * Goal 24. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V
   * Goal 25. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 26. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V
   * Goal 27. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z:37 - InsertUnaryOp Negation
   * Goal 28. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D:45 - InsertUnaryOp Negation
   * Goal 29. Weak Mutation 2: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:49 - ReplaceComparisonOperator != null -> = null
   * Goal 30. Weak Mutation 7: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:51 - ReplaceVariable j -> propietario
   * Goal 31. Weak Mutation 8: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:51 - ReplaceComparisonOperator == -> !=
   * Goal 32. Weak Mutation 41: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:82 - ReplaceComparisonOperator = null -> != null
   * Goal 33. Weak Mutation 42: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:84 - ReplaceVariable jugador -> propietario
   * Goal 34. Weak Mutation 44: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:84 - ReplaceComparisonOperator >= -> ==
   * Goal 35. Weak Mutation 46: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:86 - ReplaceVariable jugador -> propietario
   */

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Color color0 = Color.BLUE;
      Barrio barrio0 = new Barrio(color0);
      Calle calle0 = new Calle("b?W27n:_nm7HZa", (double) 27, barrio0, 203, (-1971.608060660127), (double) 27, (-1971.608060660127), 873.487830853, (double) 27, 873.487830853, (-1971.608060660127));
      Jugador jugador0 = new Jugador(";#xet");
      Tablero tablero0 = new Tablero();
      Vector vector0 = tablero0.getTarjetas(1);
      barrio0.calles = vector0;
      calle0.comprar(jugador0);
      Jugador jugador1 = new Jugador("b?W27n:_nm7HZa");
      // Undeclared exception!
      try { 
        calle0.operaciones(jugador1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         assertThrownBy("java.util.Vector", e);
      }
  }

  //Test case number: 9
  /*
   * 4 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 2. hipotecar()V_org.evosuite.runtime.mock.java.lang.MockException_DECLARED
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 4. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V
   */

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Barrio barrio0 = new Barrio((Color) null);
      Calle calle0 = new Calle(" Pagar:", 1.0, barrio0, 2146675107, 1.0, (-1.0), (-133.325292116271), (-2818.817), (-1155.0), (-133.325292116271), (-1.0));
      calle0.edificar(2146675107);
      try { 
        calle0.hipotecar();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.uclm.esi.iso5.juegos.monopoly.dominio.Calle", e);
      }
  }

  //Test case number: 10
  /*
   * 4 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 2. getTasaPorCaer()D_java.lang.NullPointerException_IMPLICIT
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 4. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getTasaPorCaer()D
   */

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Estacion estacion0 = new Estacion("'jy6g", 0.0, 0);
      // Undeclared exception!
      try { 
        estacion0.getTasaPorCaer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion", e);
      }
  }

  //Test case number: 11
  /*
   * 9 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I4 Branch 4 IFNULL L82 - true
   * Goal 3. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I4 Branch 4 IFNULL L82 - true in context: 
   * Goal 4. comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V_java.lang.NullPointerException_IMPLICIT
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 82
   * Goal 7. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 84
   * Goal 8. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V
   * Goal 9. Weak Mutation 41: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:82 - ReplaceComparisonOperator = null -> != null
   */

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Estacion estacion0 = new Estacion("", 0.0, (-3661));
      // Undeclared exception!
      try { 
        estacion0.comprar((Jugador) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio", e);
      }
  }

  //Test case number: 12
  /*
   * 9 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: root-Branch
   * Goal 3. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio:getPrecio()D
   * Goal 4. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D:Positive
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: Line 45
   * Goal 7. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D
   * Goal 8. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D
   * Goal 9. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D:45 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compania compania0 = new Compania("", 306.5657, 1);
      double double0 = compania0.getPrecio();
      assertEquals(306.5657, double0, 0.01);
  }

  //Test case number: 13
  /*
   * 17 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: root-Branch
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I4 Branch 4 IFNULL L82 - true
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I18 Branch 5 IFGE L84 - false
   * Goal 5. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I4 Branch 4 IFNULL L82 - true in context: 
   * Goal 6. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I18 Branch 5 IFGE L84 - false in context: 
   * Goal 7. comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V_org.evosuite.runtime.mock.java.lang.MockException_DECLARED
   * Goal 8. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 9. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 82
   * Goal 10. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 84
   * Goal 11. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 85
   * Goal 12. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: Line 45
   * Goal 13. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V
   * Goal 14. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D:45 - InsertUnaryOp Negation
   * Goal 15. Weak Mutation 41: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:82 - ReplaceComparisonOperator = null -> != null
   * Goal 16. Weak Mutation 42: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:84 - ReplaceVariable jugador -> propietario
   * Goal 17. Weak Mutation 43: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:84 - ReplaceComparisonOperator >= -> -1
   */

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Color color0 = Color.orange;
      Barrio barrio0 = new Barrio(color0);
      Calle calle0 = new Calle((String) null, 1502.26016, barrio0, (-3), (double) (-3), 1502.26016, 1502.26016, 965.802223280994, (double) (-3), 1502.26016, 965.802223280994);
      Jugador jugador0 = new Jugador((String) null);
      try { 
        calle0.comprar(jugador0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio", e);
      }
  }

  //Test case number: 14
  /*
   * 54 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: root-Branch
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I4 Branch 1 IFNONNULL L49 - true
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I14 Branch 2 IF_ACMPEQ L51 - false
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I38 Branch 3 IFEQ L56 - true
   * Goal 7. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I4 Branch 4 IFNULL L82 - true
   * Goal 8. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I18 Branch 5 IFGE L84 - true
   * Goal 9. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I4 Branch 1 IFNONNULL L49 - true in context: 
   * Goal 10. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I14 Branch 2 IF_ACMPEQ L51 - false in context: 
   * Goal 11. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I38 Branch 3 IFEQ L56 - true in context: 
   * Goal 12. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I4 Branch 4 IFNULL L82 - true in context: 
   * Goal 13. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I18 Branch 5 IFGE L84 - true in context: 
   * Goal 14. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:Positive
   * Goal 15. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 16. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 82
   * Goal 17. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 84
   * Goal 18. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 86
   * Goal 19. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 87
   * Goal 20. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 88
   * Goal 21. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z: Line 37
   * Goal 22. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: Line 45
   * Goal 23. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 49
   * Goal 24. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 51
   * Goal 25. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 52
   * Goal 26. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 54
   * Goal 27. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 55
   * Goal 28. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 56
   * Goal 29. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 59
   * Goal 30. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V
   * Goal 31. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 32. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V
   * Goal 33. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 34. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z:37 - InsertUnaryOp Negation
   * Goal 35. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D:45 - InsertUnaryOp Negation
   * Goal 36. Weak Mutation 2: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:49 - ReplaceComparisonOperator != null -> = null
   * Goal 37. Weak Mutation 7: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:51 - ReplaceVariable j -> propietario
   * Goal 38. Weak Mutation 8: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:51 - ReplaceComparisonOperator == -> !=
   * Goal 39. Weak Mutation 9: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:54 - ReplaceVariable j -> propietario
   * Goal 40. Weak Mutation 10: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:54 - ReplaceVariable tasaPorPasar -> precio
   * Goal 41. Weak Mutation 11: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:54 - InsertUnaryOp Negation of tasaPorPasar
   * Goal 42. Weak Mutation 12: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:56 - ReplaceVariable j -> propietario
   * Goal 43. Weak Mutation 13: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:56 - ReplaceVariable tasaPorPasar -> precio
   * Goal 44. Weak Mutation 14: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:56 - InsertUnaryOp Negation of tasaPorPasar
   * Goal 45. Weak Mutation 15: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:56 - ReplaceComparisonOperator == -> !=
   * Goal 46. Weak Mutation 21: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:59 - ReplaceConstant - 14 -> 0
   * Goal 47. Weak Mutation 22: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:59 - ReplaceConstant - 14 -> 1
   * Goal 48. Weak Mutation 23: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:59 - ReplaceConstant - 14 -> -1
   * Goal 49. Weak Mutation 24: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:59 - ReplaceConstant - 14 -> 13
   * Goal 50. Weak Mutation 25: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:59 - ReplaceConstant - 14 -> 15
   * Goal 51. Weak Mutation 41: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:82 - ReplaceComparisonOperator = null -> != null
   * Goal 52. Weak Mutation 42: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:84 - ReplaceVariable jugador -> propietario
   * Goal 53. Weak Mutation 44: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:84 - ReplaceComparisonOperator >= -> ==
   * Goal 54. Weak Mutation 46: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:86 - ReplaceVariable jugador -> propietario
   */

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Color color0 = Color.MAGENTA;
      Barrio barrio0 = new Barrio(color0);
      Jugador jugador0 = new Jugador("b?W2Pn:_nm7HZa");
      Calle calle0 = new Calle("b?W2Pn:_nm7HZa", (-1971.608), barrio0, 27, 1909.9127530008266, 1909.9127530008266, (-1971.608), (double) 27, (double) 27, (double) 27, (double) 27);
      assertEquals((-1971.608), calle0.getPrecio(), 0.01);
      
      calle0.comprar(jugador0);
      Jugador jugador1 = new Jugador("b?W2Pn:_nm7HZa");
      int int0 = calle0.operaciones(jugador1);
      assertEquals(14, int0);
  }

  //Test case number: 15
  /*
   * 47 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: root-Branch
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I4 Branch 1 IFNONNULL L49 - true
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I14 Branch 2 IF_ACMPEQ L51 - false
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I4 Branch 4 IFNULL L82 - true
   * Goal 7. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I18 Branch 5 IFGE L84 - true
   * Goal 8. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I4 Branch 1 IFNONNULL L49 - true in context: 
   * Goal 9. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I14 Branch 2 IF_ACMPEQ L51 - false in context: 
   * Goal 10. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I4 Branch 4 IFNULL L82 - true in context: 
   * Goal 11. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I18 Branch 5 IFGE L84 - true in context: 
   * Goal 12. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:Positive
   * Goal 13. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 14. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 82
   * Goal 15. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 84
   * Goal 16. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 86
   * Goal 17. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 87
   * Goal 18. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 88
   * Goal 19. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z: Line 37
   * Goal 20. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: Line 45
   * Goal 21. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 49
   * Goal 22. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 51
   * Goal 23. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 52
   * Goal 24. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 54
   * Goal 25. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 60
   * Goal 26. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 61
   * Goal 27. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V
   * Goal 28. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 29. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V
   * Goal 30. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 31. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z:37 - InsertUnaryOp Negation
   * Goal 32. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D:45 - InsertUnaryOp Negation
   * Goal 33. Weak Mutation 2: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:49 - ReplaceComparisonOperator != null -> = null
   * Goal 34. Weak Mutation 7: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:51 - ReplaceVariable j -> propietario
   * Goal 35. Weak Mutation 8: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:51 - ReplaceComparisonOperator == -> !=
   * Goal 36. Weak Mutation 9: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:54 - ReplaceVariable j -> propietario
   * Goal 37. Weak Mutation 10: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:54 - ReplaceVariable tasaPorPasar -> precio
   * Goal 38. Weak Mutation 11: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:54 - InsertUnaryOp Negation of tasaPorPasar
   * Goal 39. Weak Mutation 26: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:61 - ReplaceConstant - 3 -> 0
   * Goal 40. Weak Mutation 27: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:61 - ReplaceConstant - 3 -> 1
   * Goal 41. Weak Mutation 28: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:61 - ReplaceConstant - 3 -> -1
   * Goal 42. Weak Mutation 29: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:61 - ReplaceConstant - 3 -> 2
   * Goal 43. Weak Mutation 30: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:61 - ReplaceConstant - 3 -> 4
   * Goal 44. Weak Mutation 41: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:82 - ReplaceComparisonOperator = null -> != null
   * Goal 45. Weak Mutation 42: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:84 - ReplaceVariable jugador -> propietario
   * Goal 46. Weak Mutation 44: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:84 - ReplaceComparisonOperator >= -> ==
   * Goal 47. Weak Mutation 46: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:86 - ReplaceVariable jugador -> propietario
   */

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Color color0 = Color.BLUE;
      Barrio barrio0 = new Barrio(color0);
      Calle calle0 = new Calle("b?W27n:_nm7HZa", (double) 27, barrio0, 203, (-1971.608060660127), (double) 27, (-1971.608060660127), 873.487830853, (double) 27, 873.487830853, (-1971.608060660127));
      Jugador jugador0 = new Jugador(";#xet");
      Jugador jugador1 = new Jugador("b?W27n:_nm7HZa");
      calle0.comprar(jugador1);
      int int0 = calle0.operaciones(jugador0);
      assertEquals(1446.0, jugador0.getCapital(), 0.01);
      assertEquals(3, int0);
  }

  //Test case number: 16
  /*
   * 14 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I4 Branch 1 IFNONNULL L49 - false
   * Goal 3. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I4 Branch 1 IFNONNULL L49 - false in context: 
   * Goal 4. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:Positive
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 49
   * Goal 7. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 50
   * Goal 8. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 9. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 10. Weak Mutation 2: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:49 - ReplaceComparisonOperator != null -> = null
   * Goal 11. Weak Mutation 3: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:50 - ReplaceConstant - 2 -> 0
   * Goal 12. Weak Mutation 4: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:50 - ReplaceConstant - 2 -> 1
   * Goal 13. Weak Mutation 5: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:50 - ReplaceConstant - 2 -> -1
   * Goal 14. Weak Mutation 6: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:50 - ReplaceConstant - 2 -> 3
   */

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Estacion estacion0 = new Estacion("Avinguda Josep Tarradellas", 2372.01, 1514);
      int int0 = estacion0.operaciones((Jugador) null);
      assertEquals(2, int0);
  }

  //Test case number: 17
  /*
   * 33 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: root-Branch
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I4 Branch 1 IFNONNULL L49 - true
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I14 Branch 2 IF_ACMPEQ L51 - true
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I4 Branch 4 IFNULL L82 - true
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I18 Branch 5 IFGE L84 - true
   * Goal 7. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I4 Branch 1 IFNONNULL L49 - true in context: 
   * Goal 8. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: I14 Branch 2 IF_ACMPEQ L51 - true in context: 
   * Goal 9. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I4 Branch 4 IFNULL L82 - true in context: 
   * Goal 10. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: I18 Branch 5 IFGE L84 - true in context: 
   * Goal 11. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:Zero
   * Goal 12. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 13. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 82
   * Goal 14. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 84
   * Goal 15. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 86
   * Goal 16. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 87
   * Goal 17. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V: Line 88
   * Goal 18. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: Line 45
   * Goal 19. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 49
   * Goal 20. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 51
   * Goal 21. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I: Line 63
   * Goal 22. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V
   * Goal 23. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 24. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V
   * Goal 25. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I
   * Goal 26. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D:45 - InsertUnaryOp Negation
   * Goal 27. Weak Mutation 2: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:49 - ReplaceComparisonOperator != null -> = null
   * Goal 28. Weak Mutation 8: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:51 - ReplaceComparisonOperator == -> !=
   * Goal 29. Weak Mutation 31: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.operaciones(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)I:63 - ReplaceConstant - 0 -> 1
   * Goal 30. Weak Mutation 41: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:82 - ReplaceComparisonOperator = null -> != null
   * Goal 31. Weak Mutation 42: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:84 - ReplaceVariable jugador -> propietario
   * Goal 32. Weak Mutation 44: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:84 - ReplaceComparisonOperator >= -> ==
   * Goal 33. Weak Mutation 46: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.comprar(Ledu/uclm/esi/iso5/juegos/monopoly/dominio/Jugador;)V:86 - ReplaceVariable jugador -> propietario
   */

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Color color0 = Color.BLUE;
      Barrio barrio0 = new Barrio(color0);
      Calle calle0 = new Calle("b?W27n:_nm7HZa", (double) 27, barrio0, 203, (-1971.608060660127), (double) 27, (-1971.608060660127), 873.487830853, (double) 27, 873.487830853, (-1971.608060660127));
      Jugador jugador0 = new Jugador(";#xet");
      calle0.comprar(jugador0);
      int int0 = calle0.operaciones(jugador0);
      assertEquals(1473.0, jugador0.getCapital(), 0.01);
      assertEquals(0, int0);
  }

  //Test case number: 18
  /*
   * 20 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: root-Branch
   * Goal 4. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio:hipotecar()V
   * Goal 5. hipotecar()V_java.lang.NullPointerException_IMPLICIT
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 7. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D: Line 45
   * Goal 8. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V: Line 77
   * Goal 9. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V: Line 78
   * Goal 10. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V
   * Goal 11. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.getPrecio()D:45 - InsertUnaryOp Negation
   * Goal 12. Weak Mutation 32: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:77 - ReplaceConstant - 1 -> 0
   * Goal 13. Weak Mutation 33: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceConstant - 2.0 -> 0.0
   * Goal 14. Weak Mutation 34: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceConstant - 2.0 -> 1.0
   * Goal 15. Weak Mutation 35: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceConstant - 2.0 -> -1.0
   * Goal 16. Weak Mutation 36: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceConstant - 2.0 -> 3.0
   * Goal 17. Weak Mutation 37: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceArithmeticOperator / -> +
   * Goal 18. Weak Mutation 38: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceArithmeticOperator / -> %
   * Goal 19. Weak Mutation 39: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceArithmeticOperator / -> -
   * Goal 20. Weak Mutation 40: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.hipotecar()V:78 - ReplaceArithmeticOperator / -> *
   */

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Estacion estacion0 = new Estacion("Estaci\uFFFD de Fran\uFFFDa", 2.0, 704);
      // Undeclared exception!
      try { 
        estacion0.hipotecar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio", e);
      }
  }

  //Test case number: 19
  /*
   * 9 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 3. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio:estaHipotecada()Z
   * Goal 4. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z:False
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z: Line 37
   * Goal 7. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z
   * Goal 8. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z
   * Goal 9. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.estaHipotecada()Z:37 - InsertUnaryOp Negation
   */

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Estacion estacion0 = new Estacion("H", (-515.3704589937), 4309);
      boolean boolean0 = estacion0.estaHipotecada();
      assertFalse(boolean0);
  }

  //Test case number: 20
  /*
   * 9 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.levantarHipoteca()V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: root-Branch
   * Goal 3. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.levantarHipoteca()V: root-Branch in context: 
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.<init>(Ljava/lang/String;I)V: Line 26
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.levantarHipoteca()V: Line 91
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.levantarHipoteca()V: Line 92
   * Goal 7. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.levantarHipoteca()V
   * Goal 8. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.levantarHipoteca()V
   * Goal 9. Weak Mutation 48: edu.uclm.esi.iso5.juegos.monopoly.dominio.CasillaConPrecio.levantarHipoteca()V:91 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Estacion estacion0 = new Estacion("p1", 516.7157927861991, (-809));
      estacion0.levantarHipoteca();
      assertFalse(estacion0.estaHipotecada());
  }
}
