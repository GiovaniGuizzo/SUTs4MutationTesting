/*
 * This file was automatically generated by EvoSuite
 * Wed Jun 01 19:28:43 GMT 2016
 */

package edu.uclm.esi.iso5.juegos.monopoly.dominio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion;
import edu.uclm.esi.iso5.juegos.monopoly.dominio.Jugador;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Estacion_ESTest extends Estacion_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 35 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 1 TABLESWITCH L22 Case 1 - true
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 2 TABLESWITCH L22 Case 2 - false
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 3 TABLESWITCH L22 Case 3 - false
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 4 TABLESWITCH L22 Default-Case - false
   * Goal 6. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:<init>(Ljava/lang/String;DI)V
   * Goal 7. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 2 TABLESWITCH L22 Case 2 - false in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 8. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 1 TABLESWITCH L22 Case 1 - true in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 9. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 3 TABLESWITCH L22 Case 3 - false in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 10. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 4 TABLESWITCH L22 Default-Case - false in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 11. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:Positive
   * Goal 12. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: Line 17
   * Goal 13. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: Line 18
   * Goal 14. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 21
   * Goal 15. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 22
   * Goal 16. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 23
   * Goal 17. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V
   * Goal 18. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D
   * Goal 19. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V
   * Goal 20. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D
   * Goal 21. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V:17 - ReplaceVariable precio -> precio
   * Goal 22. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V:17 - InsertUnaryOp Negation of precio
   * Goal 23. Weak Mutation 2: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - ReplaceVariable numeroDeEstacionesDelDueño -> posicion
   * Goal 24. Weak Mutation 3: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - InsertUnaryOp Negation of numeroDeEstacionesDelDueño
   * Goal 25. Weak Mutation 4: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - InsertUnaryOp IINC 1 numeroDeEstacionesDelDueño
   * Goal 26. Weak Mutation 5: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - InsertUnaryOp IINC -1 numeroDeEstacionesDelDueño
   * Goal 27. Weak Mutation 6: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceConstant - 8.0 -> 0.0
   * Goal 28. Weak Mutation 7: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceConstant - 8.0 -> 1.0
   * Goal 29. Weak Mutation 8: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceConstant - 8.0 -> -1.0
   * Goal 30. Weak Mutation 9: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceConstant - 8.0 -> 7.0
   * Goal 31. Weak Mutation 10: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceConstant - 8.0 -> 9.0
   * Goal 32. Weak Mutation 11: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceArithmeticOperator / -> +
   * Goal 33. Weak Mutation 12: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceArithmeticOperator / -> %
   * Goal 34. Weak Mutation 13: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceArithmeticOperator / -> -
   * Goal 35. Weak Mutation 14: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceArithmeticOperator / -> *
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Estacion estacion0 = new Estacion((String) null, 599.3819404023526, (-762));
      Jugador jugador0 = new Jugador((String) null);
      estacion0.comprar(jugador0);
      double double0 = estacion0.getTasaPorCaer();
      assertEquals(74.92274255029407, double0, 0.01);
  }

  //Test case number: 1
  /*
   * 10 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: root-Branch
   * Goal 2. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:<init>(Ljava/lang/String;DI)V
   * Goal 3. getTasaPorCaer()D_java.lang.NullPointerException_IMPLICIT
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: Line 17
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: Line 18
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 21
   * Goal 7. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V
   * Goal 8. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D
   * Goal 9. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V
   * Goal 10. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V:17 - InsertUnaryOp Negation of precio
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Estacion estacion0 = new Estacion((String) null, 0.0, 11);
      // Undeclared exception!
      try { 
        estacion0.getTasaPorCaer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion", e);
      }
  }

  //Test case number: 2
  /*
   * 34 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 1 TABLESWITCH L22 Case 1 - false
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 2 TABLESWITCH L22 Case 2 - false
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 3 TABLESWITCH L22 Case 3 - true
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 4 TABLESWITCH L22 Default-Case - false
   * Goal 6. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:<init>(Ljava/lang/String;DI)V
   * Goal 7. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 1 TABLESWITCH L22 Case 1 - false in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 8. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 2 TABLESWITCH L22 Case 2 - false in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 9. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 3 TABLESWITCH L22 Case 3 - true in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 10. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 4 TABLESWITCH L22 Default-Case - false in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 11. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:Positive
   * Goal 12. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: Line 17
   * Goal 13. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: Line 18
   * Goal 14. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 21
   * Goal 15. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 22
   * Goal 16. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 25
   * Goal 17. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V
   * Goal 18. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D
   * Goal 19. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V
   * Goal 20. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D
   * Goal 21. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V:17 - ReplaceVariable precio -> precio
   * Goal 22. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V:17 - InsertUnaryOp Negation of precio
   * Goal 23. Weak Mutation 2: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - ReplaceVariable numeroDeEstacionesDelDueño -> posicion
   * Goal 24. Weak Mutation 3: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - InsertUnaryOp Negation of numeroDeEstacionesDelDueño
   * Goal 25. Weak Mutation 4: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - InsertUnaryOp IINC 1 numeroDeEstacionesDelDueño
   * Goal 26. Weak Mutation 5: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - InsertUnaryOp IINC -1 numeroDeEstacionesDelDueño
   * Goal 27. Weak Mutation 24: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:25 - ReplaceConstant - 2.0 -> 0.0
   * Goal 28. Weak Mutation 25: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:25 - ReplaceConstant - 2.0 -> 1.0
   * Goal 29. Weak Mutation 26: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:25 - ReplaceConstant - 2.0 -> -1.0
   * Goal 30. Weak Mutation 27: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:25 - ReplaceConstant - 2.0 -> 3.0
   * Goal 31. Weak Mutation 28: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:25 - ReplaceArithmeticOperator / -> +
   * Goal 32. Weak Mutation 29: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:25 - ReplaceArithmeticOperator / -> %
   * Goal 33. Weak Mutation 30: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:25 - ReplaceArithmeticOperator / -> -
   * Goal 34. Weak Mutation 31: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:25 - ReplaceArithmeticOperator / -> *
   */

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Estacion estacion0 = new Estacion((String) null, 633.261769678206, (-687));
      Jugador jugador0 = new Jugador((String) null);
      Estacion estacion1 = new Estacion((String) null, (double) (-687), (-687));
      estacion1.comprar(jugador0);
      jugador0.addPosesion(estacion1);
      estacion0.comprar(jugador0);
      double double0 = estacion0.getTasaPorCaer();
      assertEquals(316.630884839103, double0, 0.01);
  }

  //Test case number: 3
  /*
   * 35 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 1 TABLESWITCH L22 Case 1 - false
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 2 TABLESWITCH L22 Case 2 - true
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 3 TABLESWITCH L22 Case 3 - false
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 4 TABLESWITCH L22 Default-Case - false
   * Goal 6. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:<init>(Ljava/lang/String;DI)V
   * Goal 7. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 1 TABLESWITCH L22 Case 1 - false in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 8. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 3 TABLESWITCH L22 Case 3 - false in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 9. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 4 TABLESWITCH L22 Default-Case - false in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 10. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 2 TABLESWITCH L22 Case 2 - true in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 11. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:Positive
   * Goal 12. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: Line 17
   * Goal 13. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: Line 18
   * Goal 14. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 21
   * Goal 15. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 22
   * Goal 16. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 24
   * Goal 17. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V
   * Goal 18. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D
   * Goal 19. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V
   * Goal 20. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D
   * Goal 21. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V:17 - ReplaceVariable precio -> precio
   * Goal 22. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V:17 - InsertUnaryOp Negation of precio
   * Goal 23. Weak Mutation 2: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - ReplaceVariable numeroDeEstacionesDelDueño -> posicion
   * Goal 24. Weak Mutation 3: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - InsertUnaryOp Negation of numeroDeEstacionesDelDueño
   * Goal 25. Weak Mutation 4: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - InsertUnaryOp IINC 1 numeroDeEstacionesDelDueño
   * Goal 26. Weak Mutation 5: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - InsertUnaryOp IINC -1 numeroDeEstacionesDelDueño
   * Goal 27. Weak Mutation 15: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:24 - ReplaceConstant - 4.0 -> 0.0
   * Goal 28. Weak Mutation 16: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:24 - ReplaceConstant - 4.0 -> 1.0
   * Goal 29. Weak Mutation 17: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:24 - ReplaceConstant - 4.0 -> -1.0
   * Goal 30. Weak Mutation 18: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:24 - ReplaceConstant - 4.0 -> 3.0
   * Goal 31. Weak Mutation 19: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:24 - ReplaceConstant - 4.0 -> 5.0
   * Goal 32. Weak Mutation 20: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:24 - ReplaceArithmeticOperator / -> +
   * Goal 33. Weak Mutation 21: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:24 - ReplaceArithmeticOperator / -> %
   * Goal 34. Weak Mutation 22: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:24 - ReplaceArithmeticOperator / -> -
   * Goal 35. Weak Mutation 23: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:24 - ReplaceArithmeticOperator / -> *
   */

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Estacion estacion0 = new Estacion((String) null, 587.8256947127659, (-683));
      Jugador jugador0 = new Jugador((String) null);
      Estacion estacion1 = new Estacion((String) null, (double) (-683), (-683));
      jugador0.addPosesion(estacion1);
      estacion0.comprar(jugador0);
      double double0 = estacion0.getTasaPorCaer();
      assertEquals(146.95642367819147, double0, 0.01);
  }

  //Test case number: 4
  /*
   * 26 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 1 TABLESWITCH L22 Case 1 - false
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 2 TABLESWITCH L22 Case 2 - false
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 3 TABLESWITCH L22 Case 3 - false
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 4 TABLESWITCH L22 Default-Case - true
   * Goal 6. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:<init>(Ljava/lang/String;DI)V
   * Goal 7. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 1 TABLESWITCH L22 Case 1 - false in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 8. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 4 TABLESWITCH L22 Default-Case - true in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 9. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 2 TABLESWITCH L22 Case 2 - false in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 10. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 3 TABLESWITCH L22 Case 3 - false in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 11. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:Negative
   * Goal 12. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: Line 17
   * Goal 13. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: Line 18
   * Goal 14. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 21
   * Goal 15. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 22
   * Goal 16. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 27
   * Goal 17. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V
   * Goal 18. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D
   * Goal 19. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V
   * Goal 20. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D
   * Goal 21. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V:17 - ReplaceVariable precio -> precio
   * Goal 22. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V:17 - InsertUnaryOp Negation of precio
   * Goal 23. Weak Mutation 2: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - ReplaceVariable numeroDeEstacionesDelDueño -> posicion
   * Goal 24. Weak Mutation 3: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - InsertUnaryOp Negation of numeroDeEstacionesDelDueño
   * Goal 25. Weak Mutation 4: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - InsertUnaryOp IINC 1 numeroDeEstacionesDelDueño
   * Goal 26. Weak Mutation 5: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - InsertUnaryOp IINC -1 numeroDeEstacionesDelDueño
   */

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Estacion estacion0 = new Estacion("", (-92.0), 26);
      Jugador jugador0 = new Jugador((String) null);
      estacion0.propietario = jugador0;
      double double0 = estacion0.getTasaPorCaer();
      assertEquals((-92.0), double0, 0.01);
  }

  //Test case number: 5
  /*
   * 32 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 1 TABLESWITCH L22 Case 1 - true
   * Goal 3. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 2 TABLESWITCH L22 Case 2 - false
   * Goal 4. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 3 TABLESWITCH L22 Case 3 - false
   * Goal 5. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 4 TABLESWITCH L22 Default-Case - false
   * Goal 6. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:<init>(Ljava/lang/String;DI)V
   * Goal 7. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 2 TABLESWITCH L22 Case 2 - false in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 8. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 1 TABLESWITCH L22 Case 1 - true in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 9. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 3 TABLESWITCH L22 Case 3 - false in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 10. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: I9 Branch 4 TABLESWITCH L22 Default-Case - false in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:getTasaPorCaer()D
   * Goal 11. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:Zero
   * Goal 12. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: Line 17
   * Goal 13. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: Line 18
   * Goal 14. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 21
   * Goal 15. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 22
   * Goal 16. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D: Line 23
   * Goal 17. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V
   * Goal 18. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D
   * Goal 19. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V
   * Goal 20. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D
   * Goal 21. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V:17 - InsertUnaryOp Negation of precio
   * Goal 22. Weak Mutation 2: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - ReplaceVariable numeroDeEstacionesDelDueño -> posicion
   * Goal 23. Weak Mutation 3: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - InsertUnaryOp Negation of numeroDeEstacionesDelDueño
   * Goal 24. Weak Mutation 4: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - InsertUnaryOp IINC 1 numeroDeEstacionesDelDueño
   * Goal 25. Weak Mutation 5: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:22 - InsertUnaryOp IINC -1 numeroDeEstacionesDelDueño
   * Goal 26. Weak Mutation 6: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceConstant - 8.0 -> 0.0
   * Goal 27. Weak Mutation 7: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceConstant - 8.0 -> 1.0
   * Goal 28. Weak Mutation 8: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceConstant - 8.0 -> -1.0
   * Goal 29. Weak Mutation 9: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceConstant - 8.0 -> 7.0
   * Goal 30. Weak Mutation 10: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceConstant - 8.0 -> 9.0
   * Goal 31. Weak Mutation 11: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceArithmeticOperator / -> +
   * Goal 32. Weak Mutation 13: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.getTasaPorCaer()D:23 - ReplaceArithmeticOperator / -> -
   */

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Estacion estacion0 = new Estacion("H]Mr}K{%", 0.0, 30);
      Jugador jugador0 = new Jugador("H]Mr}K{%");
      estacion0.comprar(jugador0);
      double double0 = estacion0.getTasaPorCaer();
      assertEquals(0.0, double0, 0.01);
  }

  //Test case number: 6
  /*
   * 18 covered goals:
   * Goal 1. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: root-Branch
   * Goal 2. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.toString()Ljava/lang/String;: root-Branch
   * Goal 3. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.toString()Ljava/lang/String;: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:toString()Ljava/lang/String;
   * Goal 4. Branch edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: root-Branch in context: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion:<init>(Ljava/lang/String;DI)V
   * Goal 5. [Output]: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.toString()Ljava/lang/String;:NonEmptyString
   * Goal 6. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: Line 17
   * Goal 7. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V: Line 18
   * Goal 8. edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.toString()Ljava/lang/String;: Line 31
   * Goal 9. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V
   * Goal 10. [METHOD] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.toString()Ljava/lang/String;
   * Goal 11. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V
   * Goal 12. [METHODNOEX] edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.toString()Ljava/lang/String;
   * Goal 13. Weak Mutation 0: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V:17 - ReplaceVariable precio -> precio
   * Goal 14. Weak Mutation 1: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.<init>(Ljava/lang/String;DI)V:17 - InsertUnaryOp Negation of precio
   * Goal 15. Weak Mutation 32: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.toString()Ljava/lang/String;:31 - ReplaceConstant - 	Estación  -> 
   * Goal 16. Weak Mutation 33: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.toString()Ljava/lang/String;:31 - ReplaceConstant - ; precio= -> 
   * Goal 17. Weak Mutation 34: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.toString()Ljava/lang/String;:31 - InsertUnaryOp Negation
   * Goal 18. Weak Mutation 35: edu.uclm.esi.iso5.juegos.monopoly.dominio.Estacion.toString()Ljava/lang/String;:31 - ReplaceConstant - 
 -> 
   */

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Estacion estacion0 = new Estacion("", (-92.0), 26);
      String string0 = estacion0.toString();
      assertEquals("\tEstaci\u00F3n ; precio=-92.0\n", string0);
  }
}
